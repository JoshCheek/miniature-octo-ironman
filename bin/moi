#!/usr/bin/env ruby
require 'open3'

module Moi
  class Command
    def self.call(world)
      new(world).call
    end

    def call
      raise NotImplementedError, 'I SHOULD BE IMPLEMENTED BY SUBCLASSES!'
    end

    def short_description
      raise NotImplementedError, 'I SHOULD BE IMPLEMENTED BY SUBCLASSES!'
    end

    private

    attr_reader :world, :env, :argv, :stdin, :stdout, :stderr, :home_dir, :commands

    def initialize(world)
      @world    = world
      @env      = world.fetch(:env)
      @argv     = world.fetch(:argv)
      @stdin    = world.fetch(:stdin)
      @stdout   = world.fetch(:stdout)
      @stderr   = world.fetch(:stderr)
      @home_dir = world.fetch(:home_dir)
      @commands = world.fetch(:commands)
    end

    def exit(status=0)
      world.fetch(:exit).call(status)
    end

    def sh(*args, &block)
      world.fetch(:sh).call(*args)
    end

    def execute(command, world_overrides={})
      new_world = world # TODO: dup?
      world_overrides.each do |k, v|
        next new_world[k] = v if new_world.key? k
        raise ArgumentError, "Not a world attribute! #{k.inspect}"
      end
      commands[command].call(world)
    end
  end
end


class Moi::Command::Test < Moi::Command
  class << self
    def described_commands
      @described_commands ||= []
    end

    def describe_command(name, command_class, &spec)
      described_commands << [name, command_class, spec]
    end
  end

  def short_description
    'Run this binary\'s tests against itself'
  end

  def call
    require 'rspec/core'
    require 'stringio'
    self.class.described_commands.each do |name, command_class, block|
      description   = "#{name} -> #{command_class}"
      description   = command_class unless name
      example_group = RSpec.describe description, &block
      add_helpers example_group, name, command_class
    end
    exit RSpec::Core::Runner.run([], stdout, stderr).to_i
  end

  module SpecHelpers
    attr_accessor :last_exitstatus
    def build_command(short_description="command from test", &body)
      Class.new Moi::Command do
        define_method(:call, &body)
        define_method(:short_description) { short_description.dup }
      end
    end
    def execute(command_name, overrides={})
      build_command { execute command_name, overrides }.call(mock_world)
    end
    def add_command(name, &body)
      mock_commands[name] = build_command(&body)
    end
    def execute_as_command(world_overrides={}, &body)
      add_command 'mock_command', &body
      execute 'mock_command', world_overrides
    end
    def execute_described_command
      execute command_name
    end
  end

  def add_helpers(suite, command_name, command_class)
    pristine_commands = commands()
    success_status    = Open3.capture3('ruby -e "exit 0"').last # https://twitter.com/josh_cheek/status/514418264815185921
    failure_status    = Open3.capture3('ruby -e "exit 1"').last

    suite.include SpecHelpers
    suite.let(:command_name)   { command_name.dup }
    suite.let(:command_class)  { command_class }
    suite.let(:mock_env)       { {} }
    suite.let(:mock_argv)      { [] }
    suite.let(:mock_exit)      { lambda { |status| self.last_exitstatus = status } }
    suite.let(:mock_stdin)     { StringIO.new }
    suite.let(:mock_stdout)    { StringIO.new }
    suite.let(:mock_stderr)    { StringIO.new }
    suite.let(:mock_home_dir)  { '/Users/josh' }
    suite.let(:mock_commands)  { pristine_commands.dup }
    suite.let(:sh_queue)       { [] }
    suite.let(:mock_sh_out)    { StringIO.new }
    suite.let(:mock_sh_err)    { StringIO.new }
    suite.let(:mock_sh_status) { success_status }
    suite.let(:success_status) { success_status }
    suite.let(:failure_status) { failure_status }
    suite.let(:mock_sh)        { lambda { |script| sh_queue << script; [mock_sh_out, mock_sh_err, mock_sh_status]} }
    suite.let(:mock_world)     { {env: mock_env, argv: mock_argv, stdin: mock_stdin, stdout: mock_stdout, stderr: mock_stderr, exit: mock_exit, commands: mock_commands, home_dir: mock_home_dir, sh: mock_sh} }
  end
end



class Moi::Command::Help < Moi::Command
  def short_description
    'Display the help screen'
  end

  def call
    stdout.puts "Usage: moi command [arg]*"
    stdout.puts ""
    stdout.puts "Commands:"
    commands.each do |name, command|
      stdout.printf "  %-15s # %s\n", name, command.new(world).short_description
    end
  end
end


class Moi::Command::CloneMoi < Moi::Command
  def short_description
    'Clones the Moi source code to ~/moi-source'
  end

  def call
    raise NotImplementedError
    # sh "git clone https://github.com/JoshCheek/miniature-octo-ironman.git #{path home, '/moi-source'}"
  end
end


commands = {
  'test'  => Moi::Command::Test,
  'help'  => Moi::Command::Help,
  'clone' => Moi::Command::CloneMoi,
}

# TODO: a handler for nonexistent commands

at_exit do
  command, *argv = ARGV.dup
  exit commands[command].call env:      ENV,
                              argv:     argv,
                              stdin:    $stdin,
                              stdout:   $stdout,
                              stderr:   $stderr,
                              exit:     Kernel.method(:exit),
                              commands: commands,
                              home_dir: File.expand_path('~'),
                              sh:       Open3.method(:capture3)
end
# sudo chruby-exec 2.1.2 -- bundle exec pumactl --config-file puma_config.rb start


# =====  BELOW BE THE TESTS =====

Moi::Command::Test.describe_command nil, Moi::Command do
  describe 'exit' do
    it 'defaults to 0 (success)' do
      execute_as_command { exit }
      expect(last_exitstatus).to eq 0
    end

    it 'calls the real exit with the passed status' do
      execute_as_command { exit 123 }
      expect(last_exitstatus).to eq 123
    end
  end

  describe 'simple accessors to the passed in hash' do
    specify '#env    returns the environment variables' do
      mock_env['PATH'] = '/p:/a'
      execute_as_command { env['PATH'] << ':/t:/h' }
      expect(mock_env['PATH']).to eq '/p:/a:/t:/h'
    end

    specify '#argv   returns the args the process was invoked with (minus the command itself)' do
      mock_argv << '--color'
      execute_as_command { argv << '--json' }
      expect(mock_argv).to eq ['--color', '--json']
    end

    specify '#stdout returns the standard output stream' do
      execute_as_command { stdout.puts "Informational output" }
      expect(mock_stdout.string).to eq "Informational output\n"
    end

    specify '#stderr returns the standard error stream' do
      execute_as_command { stderr.puts "Debugging output" }
      expect(mock_stderr.string).to eq "Debugging output\n"
    end
  end

  describe 'exectue' do
    it 'invokes the specified command' do
      seen = []
      add_command('1') { seen << 'from command1' }
      add_command('2') { seen << 'from command2' }

      execute_as_command { execute '1' }
      expect(seen).to eq ['from command1']

      execute_as_command { execute '2' }
      expect(seen).to eq ['from command1', 'from command2']
    end

    it 'accepts overrides for command\'s world attributes' do
      argv = nil
      add_command('c1') { argv = argv() }
      execute_as_command { execute 'c1', argv: [1,2,3] }
      expect(argv).to eq [1,2,3]
    end

    it 'blows up if the overriden attribute is not a world attribute' do
      expect { execute_as_command { execute 'c1', not_an_attribute: 1 } }
        .to raise_error ArgumentError, /not_an_attribute/
    end
  end

  describe 'short_description' do
    it 'describes what the command does' do
      expect(Moi::Command::Test.new(mock_world).short_description)
        .to eq 'Run this binary\'s tests against itself'
    end

    it 'must be overridden by subclasses' do
      expect { Class.new(Moi::Command).new(mock_world).short_description }
        .to raise_error NotImplementedError, /subclass/i
    end
  end

  describe 'call' do
    it 'is what does the command\'s work' do
      mock_command = build_command { stdout.puts "doing work" }.new(mock_world)
      expect(mock_stdout.string).to eq ""
      mock_command.call
      expect(mock_stdout.string).to eq "doing work\n"
    end

    it 'must be overridden by subclasses' do
      expect { Class.new(Moi::Command).call(mock_world) }
        .to raise_error NotImplementedError, /subclass/i
    end
  end

  describe 'home_dir' do
    it 'is the home directory' do
      execute_as_command { stdout.puts home_dir }
      expect(mock_stdout.string.chomp).to eq mock_home_dir
    end
  end

  describe 'sh' do
    it 'executes the shell command and returns the output, error, and status' do
      results = nil
      execute_as_command { results = sh "omg" }
      expect(results).to eq [mock_sh_out, mock_sh_err, mock_sh_status]
      expect(sh_queue).to eq ['omg']
    end
  end
end


Moi::Command::Test.describe_command 'help', Moi::Command::Help do
  it 'prints usage info' do
    execute_described_command
    expect(mock_stdout.string).to include 'Usage'
  end

  it 'has a short description for each available command' do
    execute_described_command

    mock_commands.each do |command_name, command|
      expect(mock_stdout.string).to include command_name
      expect(mock_stdout.string).to include command.new(mock_world).short_description
    end
  end
end


Moi::Command::Test.describe_command 'clone', Moi::Command::CloneMoi do
  it 'clones the github source to ~/moi-source' do
    pending 'needs a home, sh, and path command'
    execute_described_command
  end
end
