#!/usr/bin/env ruby

module Moi
  class Command
    def self.call(world)
      new(world).call
    end

    attr_accessor :world
    def initialize(world)
      @world = world
    end

    def call
      raise 'I SHOULD BE IMPLEMENTED BY SUBCLASSES!'
    end

    def exit(status=0)
      world.fetch(:exit).call(status)
    end

    def env()      world.fetch(:env)    end
    def argv()     world.fetch(:argv)   end
    def stdin()    world.fetch(:stdin)  end
    def stdout()   world.fetch(:stdout) end
    def stderr()   world.fetch(:stderr) end
    def commands() world.fetch(:commands) end

    def execute(command, world_overrides={})
      new_world = world
      world_overrides.each do |k, v|
        next new_world[k] = v if new_world.key? k
        raise ArgumentError, "Not a world attribute! #{k.inspect}"
      end
      commands[command].call(world)
    end
  end
end


class Moi::TestCommand < Moi::Command
  # looks like there's some fancy shit I can do with hooks in the config block,
  # but wasn't really clear to me how to target them # at the level I want
  # (toplevel contexts, conditionally) without using the include/extend syntax an hooking
  # into the module's included hook, so just going to do the obvious thing.
  def add_helpers_to(suite)
    actual_command = self
    suite.send :attr_accessor, :last_exitstatus
    suite.let(:mock_env)      { {} }
    suite.let(:mock_argv)     { [] }
    suite.let(:mock_exit)     { lambda { |status| self.last_exitstatus = status } }
    suite.let(:mock_stdin)    { StringIO.new }
    suite.let(:mock_stdout)   { StringIO.new }
    suite.let(:mock_stderr)   { StringIO.new }
    suite.let(:mock_commands) { actual_command.commands.dup }
    suite.let(:mock_world)    { {env: mock_env, argv: mock_argv, stdin: mock_stdin, stdout: mock_stdout, stderr: mock_stderr, exit: mock_exit, commands: mock_commands } }

    suite.around do |spec|
      begin  real_world           = actual_command.world
             actual_command.world = mock_world
             spec.call
      ensure actual_command.world = real_world
      end
    end

    suite.send :define_method, :add_mock_command do |name, &body|
      mock_commands[name] = Class.new(Moi::Command) { define_method(:call, &body) }
    end

    suite.send :define_method, :execute_mock_command do |world_overrides={}, &body|
      add_mock_command 'mock_command', &body
      actual_command.execute 'mock_command', world_overrides
    end
  end


  def call
    require 'rspec/core'
    require 'stringio'

    add_helpers_to RSpec.describe('Moi::Command') {
      describe 'exit' do
        it 'defaults to 0 (success)' do
          execute_mock_command { exit }
          expect(last_exitstatus).to eq 0
        end

        it 'calls the world exit key with the passed value' do
          execute_mock_command { exit 123 }
          expect(last_exitstatus).to eq 123
        end
      end

      describe 'simple accessors to the passed in hash' do
        specify '#env    returns the environment variables' do
          env = nil
          execute_mock_command { env = self.env }
          expect(env).to equal mock_env
        end

        specify '#argv   returns the args the process was invoked with' do
          argv = nil
          execute_mock_command { argv = self.argv }
          expect(argv).to equal mock_argv
        end

        specify '#stdout returns the standard output stream' do
          stdout = nil
          execute_mock_command { stdout = self.stdout }
          expect(stdout).to equal mock_stdout
        end

        specify '#stderr returns the standard error stream' do
          stderr = nil
          execute_mock_command { stderr = self.stderr }
          expect(stderr).to equal mock_stderr
        end
      end

      describe 'exectue' do
        it 'invokes the specified command' do
          seen = []
          add_mock_command('1') { seen << 'from command1' }
          add_mock_command('2') { seen << 'from command2' }

          execute_mock_command { execute '1' }
          expect(seen).to eq ['from command1']

          execute_mock_command { execute '2' }
          expect(seen).to eq ['from command1', 'from command2']
        end

        it 'accepts overrides for command\'s world attributes' do
          argv = nil
          add_mock_command('c1') { argv = self.argv }
          execute_mock_command { execute 'c1', argv: [1,2,3] }
          expect(argv).to eq [1,2,3]
        end

        it 'blows up if override is not a world attribute' do
          expect { execute_mock_command { execute 'c1', not_an_attribute: 1 } }
            .to raise_error ArgumentError, /not_an_attribute/
        end
      end
    }

    rspec_argv = []
    exit RSpec::Core::Runner.run(rspec_argv, stdout, stderr).to_i
  end
end



commands = {
  'test' => Moi::TestCommand,
}


command, *argv = ARGV.dup
command = commands[command].new env:      ENV,
                                argv:     argv,
                                stdin:    $stdin,
                                stdout:   $stdout,
                                stderr:   $stderr,
                                exit:     Kernel.method(:exit),
                                commands: commands
command.call
exit 0
# sudo chruby-exec 2.1.2 -- bundle exec pumactl --config-file puma_config.rb start
